[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\mihne\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\mihne\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.8 (Oracle Corporation Java 17)
[debug]       Load.loadUnit: plugins took 94.5539ms
[debug]       Load.loadUnit: defsScala took 0.3451ms
[debug] [Loading] Scanning directory C:\Users\mihne\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mihne\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 14.1506 ms
[debug]           Load.resolveProject(global-plugins) took 42.5086ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\mihne\.sbt\1.0\plugins, plugins: List(<none>))) took 74.1349ms
[debug] [Loading] Done in C:\Users\mihne\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 95.1196ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3322ms
[debug]     Load.loadUnit(file:/C:/Users/mihne/.sbt/1.0/plugins/, ...) took 199.7573ms
[debug]   Load.apply: load took 345.0671ms
[debug]   Load.apply: resolveProjects took 4.6508ms
[debug]   Load.apply: finalTransforms took 55.7275ms
[debug]   Load.apply: config.delegates took 9.2797ms
[debug]   Load.apply: Def.make(settings)... took 376.1916ms
[debug]   Load.apply: structureIndex took 98.6292ms
[debug]   Load.apply: mkStreams took 1.6275ms
[info] loading global plugins from C:\Users\mihne\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6548.0456ms
[debug]           Load.loadUnit: plugins took 63.657ms
[debug]           Load.loadUnit: defsScala took 0.0046ms
[debug] [Loading] Scanning directory D:\skel-scala-e3\skel-scala\project
[debug]             Load.loadUnit: mkEval took 11.4138ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\skel-scala-e3\skel-scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.2389 ms
[info] loading settings for project skel-scala-build from idea1.sbt ...
[debug]               Load.resolveProject(skel-scala-build) took 9.5483ms
[debug]             Load.loadTransitive: finalizeProject(Project(id skel-scala-build, base: D:\skel-scala-e3\skel-scala\project, plugins: List(<none>))) took 12.384ms
[debug] [Loading] Done in D:\skel-scala-e3\skel-scala\project, returning: (skel-scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4353.1111ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.456ms
[debug]         Load.loadUnit(file:/D:/skel-scala-e3/skel-scala/project/, ...) took 4423.444ms
[debug]       Load.apply: load took 4425.3799ms
[debug]       Load.apply: resolveProjects took 0.0849ms
[debug]       Load.apply: finalTransforms took 13.506ms
[debug]       Load.apply: config.delegates took 0.4517ms
[debug]       Load.apply: Def.make(settings)... took 85.7655ms
[debug]       Load.apply: structureIndex took 37.4522ms
[debug]       Load.apply: mkStreams took 0.0021ms
[info] loading project definition from D:\skel-scala-e3\skel-scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 7815.07ms
[debug]     Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory D:\skel-scala-e3\skel-scala
[debug]       Load.loadUnit: mkEval took 0.4248ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.8128 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 35.0606ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\skel-scala-e3\skel-scala, plugins: List(<none>))) took 39.6821ms
[debug] [Loading] Done in D:\skel-scala-e3\skel-scala, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1513.1326ms
[debug]     Load.loadUnit: cleanEvalClasses took 19.7122ms
[debug]   Load.loadUnit(file:/D:/skel-scala-e3/skel-scala/, ...) took 9348.685ms
[debug] Load.apply: load took 9351.1537ms
[debug] Load.apply: resolveProjects took 0.105ms
[debug] Load.apply: finalTransforms took 31.9654ms
[debug] Load.apply: config.delegates took 0.3042ms
[debug] Load.apply: Def.make(settings)... took 63.0201ms
[debug] Load.apply: structureIndex took 26.2479ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to LFA-2022-2023 (in build file:/D:/skel-scala-e3/skel-scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63340 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63340, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to LFA-2022-2023 (in build file:/D:/skel-scala-e3/skel-scala/)
[debug] > Exec(idea-shell, None, None)
